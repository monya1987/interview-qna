[
  {
    "id": 0,
    "title": "Make expressions work",
    "code": "console.log((1).plus(2).minus(1) === 2);\n\n// expected result: true"
  },
  {
    "id": 1,
    "title": "Make items of an array unique",
    "code": "const uniq = (arr) => {\n  // TODO: implement\n};\n\n// console.log(uniqArr([ 1, 2, null, 45, 1, 3, [11], 45, 5, [11], 2, null ]));\n// expected result: [ 1, 2, null, 45, 3, [11], 5 ]"
  },
  {
    "id": 2,
    "title": "Make flat an array",
    "code": "const flat = (arr) => {\n  // TODO: implement\n}\n\nconsole.log(flat([0, 1, [2, [3, [4, 5], 6], [7, 8]], 9]));\n// expected result: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
  },
  {
    "id": 3,
    "title": "Make items of an array unique",
    "code": "const uniq = (arr) => {\n  // TODO: implement\n};\n\n// console.log(uniq([ 1, 2, null, 45, 1, 3, [11], 45, 5, [11], 2, null ]));\n// expected result: [ 1, 2, null, 45, 3, [11], 5 ]"
  },
  {
    "id": 4,
    "title": "Make simple memo function",
    "code": "const memo = (fn) => {\n  // TODO: implement\n};\n\nconst sum = memo((a, b) => a + b);\n\n// console.log('1 + 2 = ' + sum(1, 2)); // expected result: 1 + 2 = 3\n// console.log('2 + 3 = ' + sum(2, 3)); // expected result: 2 + 3 = 5\n// console.log('cache', sum.cache); // should display cache values"
  },
  {
    "id": 5,
    "title": "find pairs of numbers in an array",
    "code": "// RULE: no duplicates\n\nconst getPairs = (arr, ref) => {\n  // TODO: implement\n}\n\n// console.log(getPairs([1, 0, 13, -4, 8, 12, -19, 5, 32], 13));\n// expected result: [[1, 12], [0, 13], [8, 5], [-19, 32]]"
  },
  {
    "id": 6,
    "title": "Implement a function which allows to filter an array with any depth, by filter function",
    "code": "const deepFilter = (arr, filterFn) => {\n  // TODO: implement\n};\n\nconst filterFunc = (val) => {\n  // TODO: implement\n}"
  },
  {
    "id": 7,
    "title": "Throttle",
    "code": "// TODO: implement"
  },
  {
    "id": 8,
    "title": "Debounce",
    "code": "// TODO: implement\n\n\n"
  },
  {
    "id": 9,
    "title": "Promise all",
    "code": "// TODO: implement\n\n\n"
  },
  {
    "id": 10,
    "title": "fetch retry",
    "code": "// TODO: implement\n\n\n"
  },
  {
    "id": 11,
    "title": "fetch retry vs timeoutDelay",
    "code": "// TODO: implement"
  },
  {
    "id": 12,
    "title": "Make it work",
    "code": "function chunk<T>(arr: T[], size: number): T[][] {\n  const res = [];\n  const clonedArr = [...arr];\n  for (let i = 0; i < arr.length / size; i++) {\n    res.push(clonedArr.splice(0, size));\n  }\n  return res;\n}\n\nconsole.log(chunk([1, 2, 3, 4, 5, 6], 1)); // [[1], [2], [3], [4], [5], [6]]\nconsole.log(chunk([1, 2, 3, 4, 5, 6], 2)); // [[1, 2], [3, 4], [5, 6]]\nconsole.log(chunk([1, 2, 3, 4, 5, 6], 3)); // [[1, 2, 3], [4, 5, 6]]\nconsole.log(chunk([1, 2, 3, 4, 5, 6], 4)); // [[1, 2, 3, 4], [5, 6]]"
  },
  {
    "id": 13,
    "title": "Make it work",
    "code": "function limit(delayFn: typeof delay, ms: number) {\n  return (newDelay: number) => {\n    if (newDelay > ms) {\n      return Promise.reject(new Error('Time Limit Exceeded'));\n    }\n    return delayFn(ms);\n  };\n}\n\nlimit(delay, 100)(10).then(console.log).catch(console.error); // Done\nlimit(delay, 100)(50).then(console.log).catch(console.error); // Done\nlimit(delay, 100)(150).then(console.log).catch(console.error); // Error: Time Limit Exceeded\nlimit(delay, 100)(300).then(console.log).catch(console.error); // Error: Time Limit Exceeded"
  },
  {
    "id" : 14,
    "title": "range",
    "code": "function range(n1, n2) {\n  const res = [];\n  if (n1 < n2) {\n    for (let i = n1; i <= n2; i++) {\n      res.push(i);\n    }\n  } else {\n    for (let i = n1; i > n2; i--) {\n      res.push(i);\n    }\n  }\n  return res;\n}\n\nconsole.log(range(5,9)) // expected [5,6,7,8,9]\nconsole.log(range(4,-2)) // expected [4,3,2,1,0,-1,-2]"
  },
  {
    "id": 15,
    "title": "remove if more then 2",
    "code": "// remove if more then 2 duplicates\nfunction removeDuplicates(arr) {\n  const res = [];\n  const hashMap = {};\n  arr.forEach((item) => {\n    hashMap[item] = hashMap[item] ? (hashMap[item] += 1) : 1;\n    if (hashMap[item] <= 2) {\n      res.push(item);\n    }\n  });\n\n  console.log(hashMap);\n  return res;\n}\n\nconsole.log(removeDuplicates([0, 0, 0, 1, 1, 1, 2, 2, 3])); // expected [0,0,1,1,2,2,3]"
  }
]